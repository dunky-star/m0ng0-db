https://www.mongodb.com/try   --> URL for downloading MongoDB.

ADMINISTRATIVE COMMANDS:
*************************
1. net stop mongodb
2. net start mongodb


DATABASE COMMANDS:
******************
1. show dbs -> to list databases.
2. use shop -> To switch and connect to a brand new shop database
3. db.products.insertOne({name: "A Book", price: 12.99}) -> To insert a document in a collection called "products"
4. db.products.find().pretty() -> Returns all the document in a collection
5. db.products.insertOne({name: "A Tshirt", price: 1229.99, description: "This is a high quality T-shirt"})
6. db.products.insertOne({name: "A Computer", price: 1229.99, description: "A high quality computer", 
                         details: {cpu: "Intel i7 8770", memory: 32})
						




DOCUMENTS & CRUD BASICS:
************************

-> use flights
-> show collections

// Finding documents in a collection

db.flightData.find().pretty()
db.flightData.find({intercontinental: true})  -> Finding with a filter condition satisfying intercontinental
db.flightData.find({distance: {$gt: 10000}}) -> Finding with a filter condition for distance > 10000
db.flightData.findOne({distance: {$gt: 10000}}) -> Filter and returns the first matching condition

// Find and Cursor Object

db.passengers.find().toArray()


// Inserting documents into a collection "flightData"

-> db.flightData.insertOne(
 {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  }
)

db.flightData.insertOne(
 {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
)

db.flightData.insertMany([{
    "departureAirport": "AKK",
    "arrivalAirport": "EBB",
    "aircraft": "Airbus A380",
    "distance": 14000,
    "intercontinental": true
  },
  {
    "departureAirport": "MLP",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 200,
    "intercontinental": false
  }])


// Updating document in a collection

db.flightData.updateOne({distance: 12000}, {$set{marker: "delete"}})
db.flightData.updateOne({_id: ObjectId('65a756f596f8fbaf6ea75cc5')}, {$set: {delayed: true}})
db.flightData.updateMany({}, {$set{marker: "toDelete"}})


// Deleting document from a collection

db.flightData.deleteOne(departureAirport: "LHR")
db.flightData.deleteMany({marker: "toDelete"})
	   