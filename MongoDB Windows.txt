https://www.mongodb.com/try   --> URL for downloading MongoDB.

ADMINISTRATIVE COMMANDS:
*************************
1. net stop mongodb
2. net start mongodb


DATABASE COMMANDS:
******************
1. db.version() -> To show MongoDB version
2. show dbs -> to list databases.
3. use databaseName -> To create a new Database.
4. use databaseName -> db.dropDatabase()
5. use shop -> To switch and connect to a brand new shop database
6. db.products.insertOne({name: "A Book", price: 12.99}) -> To insert a document in a collection called "products"
7. db.products.find().pretty() -> Returns all the document in a collection
8. db.products.insertOne({name: "A Tshirt", price: 1229.99, description: "This is a high quality T-shirt"})
9. db.products.insertOne({name: "A Computer", price: 1229.99, description: "A high quality computer", 
                         details: {cpu: "Intel i7 8770", memory: 32})
10. db.myCollection.drop() -> To drop a collection.
						 
						 
TO RENAME MONGODB DATABASE:
***************************
mongodump --db old_dbName --out dump/
mongorestore --db new_dbName --drop dump/old_dbName		




DOCUMENTS & CRUD BASICS:
************************

-> use flights
-> show collections

// Finding documents in a collection

db.flightData.find().pretty()
db.flightData.find({intercontinental: true})  -> Finding with a filter condition satisfying intercontinental
db.flightData.find({distance: {$gt: 10000}}) -> Finding with a filter condition for distance > 10000
db.flightData.findOne({distance: {$gt: 10000}}) -> Filter and returns the first matching condition

// Find and Cursor Object

db.passengers.find().toArray()
db.passengers.find().forEach((passengerData) => {printjson(passengerData)})  // This is the best optmized query

// Find (Using Projection) to just get the important data you need without wasting the bandwidth.

db.passengers.find({}, {name: 1, _id: 0}).pretty()


// Inserting documents into a collection "flightData"

-> db.flightData.insertOne(
 {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 15000,
    "intercontinental": true
  }
)

db.flightData.insertOne(
 {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
)

db.flightData.insertMany([{
    "departureAirport": "JFK",
    "arrivalAirport": "TX",
    "aircraft": "Airbus A380",
    "distance": 15000,
    "intercontinental": true,
	"_id": "txl-lhr-1"
  },
  {
    "departureAirport": "MLP",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 200,
    "intercontinental": false
  }])


// Updating document in a collection

db.flightData.updateOne({distance: 12000}, {$set{marker: "delete"}})
db.flightData.updateOne({_id: ObjectId('668c0ac03407a7aa0a230d26')}, {$set: {delayed: true}})
db.flightData.updateMany({}, {$set{marker: "toDelete"}})

// Embedded documents and Array Theory

db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdate: "1 hour ago", details: {responsible: "G Opiyo"}}}})

// Working with Arrays

db.passengers.updateOne({name: "Albert Twostone"}, {$set: {hobbies: ["Sprot", "Cooking", "Biking"]}})

// Acessing structured data

db.flightData.find({"status.description": "on-time"}).pretty()


// Deleting document from a collection

db.flightData.deleteOne({departureAirport: "LHR"})
db.flightData.deleteMany({marker: "toDelete"})

// $lookup (Aggregate)
db.customers.aggregate([{$lookup: {from: "addresses", localField: "address", foreignField: "_id", as: "addresses" }}])
	   